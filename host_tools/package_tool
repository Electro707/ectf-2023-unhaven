#!/usr/bin/python3 -u

# @file package_tool
# @author Frederich Stine
# @brief host tool for packaging a feature for a fob
# @date 2023
#
# This source file is part of an example system for MITRE's 2023 Embedded
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2023 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!
#
# @copyright Copyright (c) 2023 The MITRE Corporation

import argparse
import json
from Crypto.Cipher import AES

SECRETS_JSON_PATH = "/secrets/secrets.json"
PACKED_EXPORT_PATH = "."

# @brief Function to create a new feature package
# @param package_name, name of the file to output package data to
# @param car_id, the id of the car the feature is being packaged for
# @param feature_number, the feature number being packaged
def package(package_name, car_id, feature_number, alt_directory):
    if alt_directory:
        with open(PACKED_EXPORT_PATH, "r") as fhandle:
            secrets = json.load(fhandle)
    else:
        with open(SECRETS_JSON_PATH, "r") as fhandle:
            secrets = json.load(fhandle)
    # This is the key we encrypt out stuff with
    feature_encryption_key = secrets["feature_unlock_key"]
    car_secret_bytes = secrets[str(car_id)+"_secret"]       # type: bytearray
    aes_cipher = AES.new(feature_encryption_key, AES.MODE_ECB)

    # TODO: Check if number is betwwen 1 and 3
    car_secret_bytes.extend(feature_number.encode('utf-8'))

    ciphertext, tag = aes_cipher.encrypt_and_digest(car_secret_bytes)



    # Write data out to package file
    # /package_dir/ is the mounted location inside the container - should not change
    if alt_directory:
        with open(f"{PACKED_EXPORT_PATH}/{package_name}", "wb") as fhandle:
            fhandle.write(ciphertext)
    else:
        with open(f"{SECRETS_JSON_PATH}/{package_name}", "wb") as fhandle:
            fhandle.write(ciphertext)

    print("Feature packaged")


# @brief Main function
#
# Main function handles parsing arguments and passing them to program
# function.
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--package-name", help="Name of the package file", type=str, required=True,
    )
    parser.add_argument(
        "--car-id", help="Car ID", type=str, required=True,
    )
    parser.add_argument(
        "--feature-number",
        help="Number of the feature to be packaged",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--alt-directory",
        help="Allows the file to pull the secrets from the local directory",
        type=bool,
        required=False,
    )

    args = parser.parse_args()

    package(args.package_name, args.car_id, args.feature_number, args.alt_directoy)


if __name__ == "__main__":
    main()
